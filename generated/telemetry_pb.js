// source: telemetry.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require("google-protobuf");
var goog = jspb;
var global =
  (typeof globalThis !== "undefined" && globalThis) ||
  (typeof window !== "undefined" && window) ||
  (typeof global !== "undefined" && global) ||
  (typeof self !== "undefined" && self) ||
  function () {
    return this;
  }.call(null) ||
  Function("return this")();

goog.exportSymbol(
  "proto.trunk.analytics_uploader.telemetry.v1.Repo",
  null,
  global,
);
goog.exportSymbol(
  "proto.trunk.analytics_uploader.telemetry.v1.Semver",
  null,
  global,
);
goog.exportSymbol(
  "proto.trunk.analytics_uploader.telemetry.v1.UploaderUploadMetrics",
  null,
  global,
);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trunk.analytics_uploader.telemetry.v1.Semver = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.trunk.analytics_uploader.telemetry.v1.Semver, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.trunk.analytics_uploader.telemetry.v1.Semver.displayName =
    "proto.trunk.analytics_uploader.telemetry.v1.Semver";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trunk.analytics_uploader.telemetry.v1.Repo = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.trunk.analytics_uploader.telemetry.v1.Repo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.trunk.analytics_uploader.telemetry.v1.Repo.displayName =
    "proto.trunk.analytics_uploader.telemetry.v1.Repo";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trunk.analytics_uploader.telemetry.v1.UploaderUploadMetrics = function (
  opt_data,
) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(
  proto.trunk.analytics_uploader.telemetry.v1.UploaderUploadMetrics,
  jspb.Message,
);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.trunk.analytics_uploader.telemetry.v1.UploaderUploadMetrics.displayName =
    "proto.trunk.analytics_uploader.telemetry.v1.UploaderUploadMetrics";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.trunk.analytics_uploader.telemetry.v1.Semver.prototype.toObject =
    function (opt_includeInstance) {
      return proto.trunk.analytics_uploader.telemetry.v1.Semver.toObject(
        opt_includeInstance,
        this,
      );
    };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.trunk.analytics_uploader.telemetry.v1.Semver} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.trunk.analytics_uploader.telemetry.v1.Semver.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        major: jspb.Message.getFieldWithDefault(msg, 1, 0),
        minor: jspb.Message.getFieldWithDefault(msg, 2, 0),
        patch: jspb.Message.getFieldWithDefault(msg, 3, 0),
        suffix: jspb.Message.getFieldWithDefault(msg, 4, ""),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trunk.analytics_uploader.telemetry.v1.Semver}
 */
proto.trunk.analytics_uploader.telemetry.v1.Semver.deserializeBinary =
  function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.trunk.analytics_uploader.telemetry.v1.Semver();
    return proto.trunk.analytics_uploader.telemetry.v1.Semver.deserializeBinaryFromReader(
      msg,
      reader,
    );
  };

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trunk.analytics_uploader.telemetry.v1.Semver} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trunk.analytics_uploader.telemetry.v1.Semver}
 */
proto.trunk.analytics_uploader.telemetry.v1.Semver.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = /** @type {number} */ (reader.readUint32());
          msg.setMajor(value);
          break;
        case 2:
          var value = /** @type {number} */ (reader.readUint32());
          msg.setMinor(value);
          break;
        case 3:
          var value = /** @type {number} */ (reader.readUint32());
          msg.setPatch(value);
          break;
        case 4:
          var value = /** @type {string} */ (reader.readString());
          msg.setSuffix(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trunk.analytics_uploader.telemetry.v1.Semver.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.trunk.analytics_uploader.telemetry.v1.Semver.serializeBinaryToWriter(
      this,
      writer,
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trunk.analytics_uploader.telemetry.v1.Semver} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trunk.analytics_uploader.telemetry.v1.Semver.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined;
    f = message.getMajor();
    if (f !== 0) {
      writer.writeUint32(1, f);
    }
    f = message.getMinor();
    if (f !== 0) {
      writer.writeUint32(2, f);
    }
    f = message.getPatch();
    if (f !== 0) {
      writer.writeUint32(3, f);
    }
    f = message.getSuffix();
    if (f.length > 0) {
      writer.writeString(4, f);
    }
  };

/**
 * optional uint32 major = 1;
 * @return {number}
 */
proto.trunk.analytics_uploader.telemetry.v1.Semver.prototype.getMajor =
  function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
  };

/**
 * @param {number} value
 * @return {!proto.trunk.analytics_uploader.telemetry.v1.Semver} returns this
 */
proto.trunk.analytics_uploader.telemetry.v1.Semver.prototype.setMajor =
  function (value) {
    return jspb.Message.setProto3IntField(this, 1, value);
  };

/**
 * optional uint32 minor = 2;
 * @return {number}
 */
proto.trunk.analytics_uploader.telemetry.v1.Semver.prototype.getMinor =
  function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
  };

/**
 * @param {number} value
 * @return {!proto.trunk.analytics_uploader.telemetry.v1.Semver} returns this
 */
proto.trunk.analytics_uploader.telemetry.v1.Semver.prototype.setMinor =
  function (value) {
    return jspb.Message.setProto3IntField(this, 2, value);
  };

/**
 * optional uint32 patch = 3;
 * @return {number}
 */
proto.trunk.analytics_uploader.telemetry.v1.Semver.prototype.getPatch =
  function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
  };

/**
 * @param {number} value
 * @return {!proto.trunk.analytics_uploader.telemetry.v1.Semver} returns this
 */
proto.trunk.analytics_uploader.telemetry.v1.Semver.prototype.setPatch =
  function (value) {
    return jspb.Message.setProto3IntField(this, 3, value);
  };

/**
 * optional string suffix = 4;
 * @return {string}
 */
proto.trunk.analytics_uploader.telemetry.v1.Semver.prototype.getSuffix =
  function () {
    return /** @type {string} */ (
      jspb.Message.getFieldWithDefault(this, 4, "")
    );
  };

/**
 * @param {string} value
 * @return {!proto.trunk.analytics_uploader.telemetry.v1.Semver} returns this
 */
proto.trunk.analytics_uploader.telemetry.v1.Semver.prototype.setSuffix =
  function (value) {
    return jspb.Message.setProto3StringField(this, 4, value);
  };

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.trunk.analytics_uploader.telemetry.v1.Repo.prototype.toObject =
    function (opt_includeInstance) {
      return proto.trunk.analytics_uploader.telemetry.v1.Repo.toObject(
        opt_includeInstance,
        this,
      );
    };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.trunk.analytics_uploader.telemetry.v1.Repo} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.trunk.analytics_uploader.telemetry.v1.Repo.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        host: jspb.Message.getFieldWithDefault(msg, 1, ""),
        owner: jspb.Message.getFieldWithDefault(msg, 2, ""),
        name: jspb.Message.getFieldWithDefault(msg, 3, ""),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trunk.analytics_uploader.telemetry.v1.Repo}
 */
proto.trunk.analytics_uploader.telemetry.v1.Repo.deserializeBinary = function (
  bytes,
) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trunk.analytics_uploader.telemetry.v1.Repo();
  return proto.trunk.analytics_uploader.telemetry.v1.Repo.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trunk.analytics_uploader.telemetry.v1.Repo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trunk.analytics_uploader.telemetry.v1.Repo}
 */
proto.trunk.analytics_uploader.telemetry.v1.Repo.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = /** @type {string} */ (reader.readString());
          msg.setHost(value);
          break;
        case 2:
          var value = /** @type {string} */ (reader.readString());
          msg.setOwner(value);
          break;
        case 3:
          var value = /** @type {string} */ (reader.readString());
          msg.setName(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trunk.analytics_uploader.telemetry.v1.Repo.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.trunk.analytics_uploader.telemetry.v1.Repo.serializeBinaryToWriter(
      this,
      writer,
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trunk.analytics_uploader.telemetry.v1.Repo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trunk.analytics_uploader.telemetry.v1.Repo.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined;
    f = message.getHost();
    if (f.length > 0) {
      writer.writeString(1, f);
    }
    f = message.getOwner();
    if (f.length > 0) {
      writer.writeString(2, f);
    }
    f = message.getName();
    if (f.length > 0) {
      writer.writeString(3, f);
    }
  };

/**
 * optional string host = 1;
 * @return {string}
 */
proto.trunk.analytics_uploader.telemetry.v1.Repo.prototype.getHost =
  function () {
    return /** @type {string} */ (
      jspb.Message.getFieldWithDefault(this, 1, "")
    );
  };

/**
 * @param {string} value
 * @return {!proto.trunk.analytics_uploader.telemetry.v1.Repo} returns this
 */
proto.trunk.analytics_uploader.telemetry.v1.Repo.prototype.setHost = function (
  value,
) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string owner = 2;
 * @return {string}
 */
proto.trunk.analytics_uploader.telemetry.v1.Repo.prototype.getOwner =
  function () {
    return /** @type {string} */ (
      jspb.Message.getFieldWithDefault(this, 2, "")
    );
  };

/**
 * @param {string} value
 * @return {!proto.trunk.analytics_uploader.telemetry.v1.Repo} returns this
 */
proto.trunk.analytics_uploader.telemetry.v1.Repo.prototype.setOwner = function (
  value,
) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional string name = 3;
 * @return {string}
 */
proto.trunk.analytics_uploader.telemetry.v1.Repo.prototype.getName =
  function () {
    return /** @type {string} */ (
      jspb.Message.getFieldWithDefault(this, 3, "")
    );
  };

/**
 * @param {string} value
 * @return {!proto.trunk.analytics_uploader.telemetry.v1.Repo} returns this
 */
proto.trunk.analytics_uploader.telemetry.v1.Repo.prototype.setName = function (
  value,
) {
  return jspb.Message.setProto3StringField(this, 3, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.trunk.analytics_uploader.telemetry.v1.UploaderUploadMetrics.prototype.toObject =
    function (opt_includeInstance) {
      return proto.trunk.analytics_uploader.telemetry.v1.UploaderUploadMetrics.toObject(
        opt_includeInstance,
        this,
      );
    };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.trunk.analytics_uploader.telemetry.v1.UploaderUploadMetrics} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.trunk.analytics_uploader.telemetry.v1.UploaderUploadMetrics.toObject =
    function (includeInstance, msg) {
      var f,
        obj = {
          uploaderVersion:
            (f = msg.getUploaderVersion()) &&
            proto.trunk.analytics_uploader.telemetry.v1.Semver.toObject(
              includeInstance,
              f,
            ),
          repo:
            (f = msg.getRepo()) &&
            proto.trunk.analytics_uploader.telemetry.v1.Repo.toObject(
              includeInstance,
              f,
            ),
          failed: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
          failureReason: jspb.Message.getFieldWithDefault(msg, 4, ""),
        };

      if (includeInstance) {
        obj.$jspbMessageInstance = msg;
      }
      return obj;
    };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trunk.analytics_uploader.telemetry.v1.UploaderUploadMetrics}
 */
proto.trunk.analytics_uploader.telemetry.v1.UploaderUploadMetrics.deserializeBinary =
  function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg =
      new proto.trunk.analytics_uploader.telemetry.v1.UploaderUploadMetrics();
    return proto.trunk.analytics_uploader.telemetry.v1.UploaderUploadMetrics.deserializeBinaryFromReader(
      msg,
      reader,
    );
  };

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trunk.analytics_uploader.telemetry.v1.UploaderUploadMetrics} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trunk.analytics_uploader.telemetry.v1.UploaderUploadMetrics}
 */
proto.trunk.analytics_uploader.telemetry.v1.UploaderUploadMetrics.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = new proto.trunk.analytics_uploader.telemetry.v1.Semver();
          reader.readMessage(
            value,
            proto.trunk.analytics_uploader.telemetry.v1.Semver
              .deserializeBinaryFromReader,
          );
          msg.setUploaderVersion(value);
          break;
        case 2:
          var value = new proto.trunk.analytics_uploader.telemetry.v1.Repo();
          reader.readMessage(
            value,
            proto.trunk.analytics_uploader.telemetry.v1.Repo
              .deserializeBinaryFromReader,
          );
          msg.setRepo(value);
          break;
        case 3:
          var value = /** @type {boolean} */ (reader.readBool());
          msg.setFailed(value);
          break;
        case 4:
          var value = /** @type {string} */ (reader.readString());
          msg.setFailureReason(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trunk.analytics_uploader.telemetry.v1.UploaderUploadMetrics.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.trunk.analytics_uploader.telemetry.v1.UploaderUploadMetrics.serializeBinaryToWriter(
      this,
      writer,
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trunk.analytics_uploader.telemetry.v1.UploaderUploadMetrics} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trunk.analytics_uploader.telemetry.v1.UploaderUploadMetrics.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined;
    f = message.getUploaderVersion();
    if (f != null) {
      writer.writeMessage(
        1,
        f,
        proto.trunk.analytics_uploader.telemetry.v1.Semver
          .serializeBinaryToWriter,
      );
    }
    f = message.getRepo();
    if (f != null) {
      writer.writeMessage(
        2,
        f,
        proto.trunk.analytics_uploader.telemetry.v1.Repo
          .serializeBinaryToWriter,
      );
    }
    f = message.getFailed();
    if (f) {
      writer.writeBool(3, f);
    }
    f = message.getFailureReason();
    if (f.length > 0) {
      writer.writeString(4, f);
    }
  };

/**
 * optional Semver uploader_version = 1;
 * @return {?proto.trunk.analytics_uploader.telemetry.v1.Semver}
 */
proto.trunk.analytics_uploader.telemetry.v1.UploaderUploadMetrics.prototype.getUploaderVersion =
  function () {
    return /** @type{?proto.trunk.analytics_uploader.telemetry.v1.Semver} */ (
      jspb.Message.getWrapperField(
        this,
        proto.trunk.analytics_uploader.telemetry.v1.Semver,
        1,
      )
    );
  };

/**
 * @param {?proto.trunk.analytics_uploader.telemetry.v1.Semver|undefined} value
 * @return {!proto.trunk.analytics_uploader.telemetry.v1.UploaderUploadMetrics} returns this
 */
proto.trunk.analytics_uploader.telemetry.v1.UploaderUploadMetrics.prototype.setUploaderVersion =
  function (value) {
    return jspb.Message.setWrapperField(this, 1, value);
  };

/**
 * Clears the message field making it undefined.
 * @return {!proto.trunk.analytics_uploader.telemetry.v1.UploaderUploadMetrics} returns this
 */
proto.trunk.analytics_uploader.telemetry.v1.UploaderUploadMetrics.prototype.clearUploaderVersion =
  function () {
    return this.setUploaderVersion(undefined);
  };

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trunk.analytics_uploader.telemetry.v1.UploaderUploadMetrics.prototype.hasUploaderVersion =
  function () {
    return jspb.Message.getField(this, 1) != null;
  };

/**
 * optional Repo repo = 2;
 * @return {?proto.trunk.analytics_uploader.telemetry.v1.Repo}
 */
proto.trunk.analytics_uploader.telemetry.v1.UploaderUploadMetrics.prototype.getRepo =
  function () {
    return /** @type{?proto.trunk.analytics_uploader.telemetry.v1.Repo} */ (
      jspb.Message.getWrapperField(
        this,
        proto.trunk.analytics_uploader.telemetry.v1.Repo,
        2,
      )
    );
  };

/**
 * @param {?proto.trunk.analytics_uploader.telemetry.v1.Repo|undefined} value
 * @return {!proto.trunk.analytics_uploader.telemetry.v1.UploaderUploadMetrics} returns this
 */
proto.trunk.analytics_uploader.telemetry.v1.UploaderUploadMetrics.prototype.setRepo =
  function (value) {
    return jspb.Message.setWrapperField(this, 2, value);
  };

/**
 * Clears the message field making it undefined.
 * @return {!proto.trunk.analytics_uploader.telemetry.v1.UploaderUploadMetrics} returns this
 */
proto.trunk.analytics_uploader.telemetry.v1.UploaderUploadMetrics.prototype.clearRepo =
  function () {
    return this.setRepo(undefined);
  };

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trunk.analytics_uploader.telemetry.v1.UploaderUploadMetrics.prototype.hasRepo =
  function () {
    return jspb.Message.getField(this, 2) != null;
  };

/**
 * optional bool failed = 3;
 * @return {boolean}
 */
proto.trunk.analytics_uploader.telemetry.v1.UploaderUploadMetrics.prototype.getFailed =
  function () {
    return /** @type {boolean} */ (
      jspb.Message.getBooleanFieldWithDefault(this, 3, false)
    );
  };

/**
 * @param {boolean} value
 * @return {!proto.trunk.analytics_uploader.telemetry.v1.UploaderUploadMetrics} returns this
 */
proto.trunk.analytics_uploader.telemetry.v1.UploaderUploadMetrics.prototype.setFailed =
  function (value) {
    return jspb.Message.setProto3BooleanField(this, 3, value);
  };

/**
 * optional string failure_reason = 4;
 * @return {string}
 */
proto.trunk.analytics_uploader.telemetry.v1.UploaderUploadMetrics.prototype.getFailureReason =
  function () {
    return /** @type {string} */ (
      jspb.Message.getFieldWithDefault(this, 4, "")
    );
  };

/**
 * @param {string} value
 * @return {!proto.trunk.analytics_uploader.telemetry.v1.UploaderUploadMetrics} returns this
 */
proto.trunk.analytics_uploader.telemetry.v1.UploaderUploadMetrics.prototype.setFailureReason =
  function (value) {
    return jspb.Message.setProto3StringField(this, 4, value);
  };

goog.object.extend(exports, proto.trunk.analytics_uploader.telemetry.v1);
